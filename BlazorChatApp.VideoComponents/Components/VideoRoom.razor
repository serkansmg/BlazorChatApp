@page "/videoroom/{RoomId}"
@inject IVideoConferenceService VideoService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using BlazorChatApp.Models.Video
@using System.Collections.ObjectModel
@using System.Text.Json
@using BlazorChatApp.Services
@using BlazorChatApp.Shared.Models.VideoModels
@using Microsoft.JSInterop

<div class="video-conference-container">
    @if (!IsJoined)
    {
        <div class="pre-join-setup">
            <h2>Join Video Room: @RoomId</h2>
            
            <div class="user-info">
                <label for="displayName">Display Name:</label>
                <input type="text" id="displayName" @bind-value="DisplayName" placeholder="Enter your display name" class="form-control" />
            </div>
            
            <div class="device-selection">
                <h3>Select Devices</h3>
                
                <div class="form-group">
                    <label for="videoDevices">Camera:</label>
                    <select id="videoDevices" @bind="SelectedVideoDeviceId" class="form-control">
                        <option value="">Default Camera</option>
                        @foreach (var device in VideoDevices)
                        {
                            <option value="@device.DeviceId">@device.Label</option>
                        }
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="audioDevices">Microphone:</label>
                    <select id="audioDevices" @bind="SelectedAudioDeviceId" class="form-control">
                        <option value="">Default Microphone</option>
                        @foreach (var device in AudioDevices)
                        {
                            <option value="@device.DeviceId">@device.Label</option>
                        }
                    </select>
                </div>
            </div>
            
            <button @onclick="JoinRoom" disabled="@IsJoining" class="btn btn-primary">
                @if (IsJoining)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                }
                Join Room
            </button>
            
            @if (ErrorMessage != null)
            {
                <div class="alert alert-danger mt-3">@ErrorMessage</div>
            }
        </div>
    }
    else
    {
        <div class="room-interface">
            <div class="room-header">
                <h2>@Room.RoomName</h2>
                <p class="participant-count">Participants: @Room.CurrentParticipantCount / @Room.MaxParticipants</p>
                @if (IsHostOrModerator)
                {
                    <button @onclick="LeaveRoom" class="btn btn-secondary me-2">Leave Room</button>
                }
                else
                {
                    <button @onclick="LeaveRoom" class="btn btn-danger">Leave Room</button>
                }
            </div>
            
            <div class="videos-grid">
                <div class="local-video-container">
                    <video id="local-video" autoplay playsinline muted class="video-element"></video>
                    <div class="participant-info">
                        <span class="name">You (@DisplayName)</span>
                        <div class="status">
                            @(IsMuted ? "üîá Muted" : "üó£Ô∏è Speaking") 
                            @(IsVideoEnabled ? "üìπ Video On" : "üì¥ Video Off")
                        </div>
                    </div>
                    <div class="controls">
                        <button @onclick="ToggleMute" class="btn btn-sm @(IsMuted ? "btn-success" : "btn-outline-danger")">
                            @(IsMuted ? "Unmute" : "Mute")
                        </button>
                        <button @onclick="ToggleVideo" class="btn btn-sm @(IsVideoEnabled ? "btn-outline-danger" : "btn-success")">
                            @(IsVideoEnabled ? "Stop Video" : "Start Video")
                        </button>
                        <button @onclick="StartScreenShare" class="btn btn-sm btn-info">
                            Share Screen
                        </button>
                    </div>
                </div>
                
                @if (Participants.Any(p => p.UserId != UserId))
                {
                    @foreach (var participant in Participants.Where(p => p.UserId != UserId))
                    {
                        <div class="remote-video-container">
                            <video id="remote-video-@participant.UserId" autoplay playsinline class="video-element"></video>
                            <div class="participant-info">
                                <span class="name">@participant.DisplayName</span>
                                <div class="status">
                                    @(participant.IsMuted ? "üîá Muted" : "üó£Ô∏è Speaking") 
                                    @(participant.IsVideoEnabled ? "üìπ Video On" : "üì¥ Video Off")
                                </div>
                            </div>
                            @if (IsHostOrModerator)
                            {
                                <button @onclick="() => KickParticipant(participant.UserId)" class="btn btn-sm btn-danger kick-btn">
                                    Kick
                                </button>
                            }
                        </div>
                    }
                }
                else
                {
                    <div class="no-participants">
                        <p>Waiting for other participants to join...</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string RoomId { get; set; } = "";
    [Parameter] public string? UserId { get; set; } // External UserId - if null, generate new
    [Parameter] public string? InitialDisplayName { get; set; }
    [Parameter] public VideoParticipantRole InitialRole { get; set; } = VideoParticipantRole.Participant;

    private VideoRoomInfo Room { get; set; } = new();
    private ObservableCollection<VideoParticipant> Participants { get; set; } = new();
    private List<MediaDevice> VideoDevices { get; set; } = new();
    private List<MediaDevice> AudioDevices { get; set; } = new();
    private string SelectedVideoDeviceId { get; set; } = "";
    private string SelectedAudioDeviceId { get; set; } = "";
    private bool IsJoined { get; set; } = false;
    private bool IsJoining { get; set; } = false;
    private bool IsMuted { get; set; } = false;
    private bool IsVideoEnabled { get; set; } = true;
    private bool IsScreenSharing { get; set; } = false;
    private VideoParticipant? CurrentParticipant;
    private string? ErrorMessage;
    private Timer? _participantUpdateTimer;
    //DisplayName
    private string DisplayName { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        // Generate UserId if not provided
        if (string.IsNullOrEmpty(UserId))
        {
            UserId = Guid.NewGuid().ToString();
        }

        // Set display name if provided
        if (!string.IsNullOrEmpty(InitialDisplayName))
        {
            DisplayName = InitialDisplayName;
        }

        try
        {
            // Check if room exists
            var roomExists = await VideoService.IsRoomExistsAsync(RoomId);
            if (!roomExists)
            {
                ErrorMessage = $"Room {RoomId} does not exist.";
                return;
            }

            // Get room info
            Room = await VideoService.GetRoomInfoAsync(RoomId) ?? new VideoRoomInfo
            {
                RoomId = RoomId,
                RoomName = $"Room {RoomId}",
                Status = VideoRoomStatus.Active,
                MaxParticipants = 10,
                CurrentParticipantCount = 0
            };

            // Get media devices
            await LoadMediaDevicesAsync();

            // Start periodic participant updates
            _participantUpdateTimer = new Timer(async _ => await UpdateParticipantsAsync(), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error initializing room: {ex.Message}";
            Console.WriteLine($"VideoRoom init error: {ex}");
        }
    }

    private async Task LoadMediaDevicesAsync()
    {
        try
        {
            var devices = await JS.InvokeAsync<List<MediaDevice>>("getMediaDevices");
            VideoDevices = devices.Where(d => d.Kind == "videoinput").ToList();
            AudioDevices = devices.Where(d => d.Kind == "audioinput").ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading devices: {ex.Message}");
            // Fallback to empty lists
        }
    }

    private async Task JoinRoom()
    {
        if (string.IsNullOrEmpty(DisplayName))
        {
            ErrorMessage = "Please enter a display name.";
            return;
        }

        IsJoining = true;
        ErrorMessage = null;
        StateHasChanged();

        try
        {
            // Create media constraints using our model
            var constraints = CreateMediaConstraints();
            
            // Initialize JS WebRTC with constraints
            await JS.InvokeVoidAsync("initWebRTC", DotNetObjectReference.Create(this));
            await JS.InvokeVoidAsync("setMediaConstraints", JsonSerializer.Serialize(constraints));

            // Join the room via service
            Room = await VideoService.JoinRoomAsync(RoomId, UserId, DisplayName);
            
            // Create current participant
            CurrentParticipant = new VideoParticipant
            {
                UserId = UserId,
                DisplayName = DisplayName,
                Role = InitialRole,
                IsMuted = IsMuted,
                IsVideoEnabled = IsVideoEnabled,
                JoinedAt = DateTime.UtcNow
            };

            Participants.Add(CurrentParticipant);
            IsJoined = true;

            // Set local video element
            await JS.InvokeVoidAsync("setLocalVideoElement", "local-video");
            
            // Start participant updates
            await UpdateParticipantsAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error joining room: {ex.Message}";
            Console.WriteLine($"Join room error: {ex}");
        }
        finally
        {
            IsJoining = false;
            StateHasChanged();
        }
    }

    private MediaDeviceConstraints CreateMediaConstraints()
    {
        return new MediaDeviceConstraints
        {
            Video = string.IsNullOrEmpty(SelectedVideoDeviceId) 
                ? new VideoConstraints() 
                : new VideoConstraints { DeviceId = SelectedVideoDeviceId },
            Audio = string.IsNullOrEmpty(SelectedAudioDeviceId) 
                ? new AudioConstraints() 
                : new AudioConstraints { DeviceId = SelectedAudioDeviceId }
        };
    }

    private async Task LeaveRoom()
    {
        try
        {
            if (IsJoined)
            {
                await VideoService.LeaveRoomAsync(RoomId, UserId);
                await JS.InvokeVoidAsync("cleanupPeerConnection", UserId);
            }

            // Cleanup timer
            _participantUpdateTimer?.Dispose();
            
            IsJoined = false;
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error leaving room: {ex.Message}";
            Console.WriteLine($"Leave room error: {ex}");
        }
    }

    private async Task ToggleMute()
    {
        try
        {
            IsMuted = !IsMuted;
            await JS.InvokeVoidAsync("toggleMute", UserId, IsMuted);
            await VideoService.ToggleParticipantMediaAsync(RoomId, UserId, IsMuted, IsVideoEnabled);
            CurrentParticipant.IsMuted = IsMuted;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error toggling mute: {ex.Message}";
        }
    }

    private async Task ToggleVideo()
    {
        try
        {
            IsVideoEnabled = !IsVideoEnabled;
            await VideoService.ToggleParticipantMediaAsync(RoomId, UserId, IsMuted, IsVideoEnabled);
            CurrentParticipant.IsVideoEnabled = IsVideoEnabled;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error toggling video: {ex.Message}";
        }
    }

    private async Task StartScreenShare()
    {
        try
        {
            IsScreenSharing = true;
            await JS.InvokeVoidAsync("startScreenShare", UserId);
            // Update participant status
            if (CurrentParticipant != null)
            {
                CurrentParticipant.IsScreenSharing = true;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error starting screen share: {ex.Message}";
            IsScreenSharing = false;
        }
    }

    private async Task KickParticipant(string targetUserId)
    {
        if (!IsHostOrModerator)
        {
            ErrorMessage = "You don't have permission to kick participants.";
            return;
        }

        try
        {
            await VideoService.KickParticipantAsync(RoomId, targetUserId, UserId);
            await JS.InvokeVoidAsync("cleanupPeerConnection", targetUserId);
            await UpdateParticipantsAsync();
            ErrorMessage = $"User {targetUserId} has been kicked.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error kicking participant: {ex.Message}";
        }
    }

    private async Task UpdateParticipantsAsync()
    {
        if (!IsJoined) return;

        try
        {
            var participants = await VideoService.GetRoomParticipantsAsync(RoomId);
            var currentIds = Participants.Select(p => p.UserId).ToHashSet();
            var newIds = participants.Select(p => p.UserId).ToHashSet();

            // Add new participants
            foreach (var p in participants.Where(p => !currentIds.Contains(p.UserId)))
            {
                Participants.Add(p);
                // Initialize remote video
                await JS.InvokeVoidAsync("initializeRemoteVideo", p.UserId);
            }

            // Remove left participants
            var leftParticipants = Participants.Where(p => !newIds.Contains(p.UserId)).ToList();
            foreach (var p in leftParticipants)
            {
                Participants.Remove(p);
                await JS.InvokeVoidAsync("cleanupRemoteVideo", p.UserId);
            }

            Room.CurrentParticipantCount = Participants.Count;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating participants: {ex.Message}");
        }
    }

    private bool IsHostOrModerator => CurrentParticipant?.Role == VideoParticipantRole.Host || 
                                      CurrentParticipant?.Role == VideoParticipantRole.Moderator;

    public void Dispose()
    {
        _participantUpdateTimer?.Dispose();
        JS.InvokeVoidAsync("cleanupAllPeerConnections").AsTask().Wait();
    }

    // JS callbacks
    [JSInvokable]
    public async Task OnRemoteStreamAdded(string userId, string streamId)
    {
        await InvokeAsync(StateHasChanged);
    }
}

<style>
    .video-conference-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .pre-join-setup {
        max-width: 500px;
        margin: 0 auto;
        text-align: center;
    }

    .user-info {
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
        text-align: left;
    }

    .form-control {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
    }

    .room-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        flex-wrap: wrap;
        gap: 10px;
    }

    .participant-count {
        font-size: 16px;
        color: #666;
        margin: 0;
    }

    .videos-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    .local-video-container, .remote-video-container {
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 15px;
        text-align: center;
        position: relative;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .local-video-container {
        grid-column: span 2;
        max-width: 640px;
        margin: 0 auto;
    }

    .video-element {
        width: 100%;
        height: 240px;
        background-color: #000;
        border-radius: 4px;
        object-fit: cover;
    }

    .participant-info {
        margin: 10px 0;
    }

    .name {
        display: block;
        font-weight: bold;
        color: #333;
        font-size: 14px;
    }

    .status {
        font-size: 12px;
        color: #666;
        margin-top: 2px;
    }

    .controls {
        display: flex;
        gap: 8px;
        justify-content: center;
        flex-wrap: wrap;
        margin-top: 10px;
    }

    .kick-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 10;
    }

    .no-participants {
        grid-column: 1 / -1;
        text-align: center;
        padding: 40px;
        color: #666;
    }

    .alert {
        border-radius: 4px;
        padding: 12px;
        margin-top: 10px;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }

    .btn {
        padding: 8px 16px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background-color: #0056b3;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-danger:hover:not(:disabled) {
        background-color: #c82333;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .btn-success:hover:not(:disabled) {
        background-color: #218838;
    }

    .btn-info {
        background-color: #17a2b8;
        color: white;
    }

    .btn-info:hover:not(:disabled) {
        background-color: #138496;
    }

    .btn-outline-danger {
        background-color: transparent;
        color: #dc3545;
        border: 1px solid #dc3545;
    }

    .btn-outline-danger:hover:not(:disabled) {
        background-color: #dc3545;
        color: white;
    }

    .spinner-border {
        width: 1rem;
        height: 1rem;
    }

    @@media (max-width: 768px) {
        .videos-grid {
            grid-template-columns: 1fr;
        }
        
        .local-video-container {
            grid-column: span 1;
        }
        
        .room-header {
            flex-direction: column;
            align-items: stretch;
            text-align: center;
        }
        
        .controls {
            justify-content: stretch;
        }
        
        .btn {
            flex: 1;
            margin: 2px;
        }
    }
</style>