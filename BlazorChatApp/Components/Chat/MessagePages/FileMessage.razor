@using BlazorChatApp.Models.Chat
@using Radzen
@using Radzen.Blazor

<div class="file-message">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.75rem" 
               Style="padding: 0.5rem; border: 1px solid #ddd; border-radius: 8px; cursor: pointer;"
               @onclick="@(() => DownloadFile(Message.FileUrl, Message.FileName))">
        <RadzenIcon Icon="@GetFileIcon(Message.FileName)" Size="24px" />
        <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem" Style="flex: 1;">
            <RadzenText TextStyle="TextStyle.Subtitle2">@Message.FileName</RadzenText>
            <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                @FormatFileSize(Message.FileSize ?? 0)
            </RadzenText>
        </RadzenStack>
        <RadzenIcon Icon="download" Size="20px" />
    </RadzenStack>
</div>

@code {
    [Parameter] public ChatMessageModel Message { get; set; } = null!;
    [Parameter] public EventCallback<(string Url, string FileName)> OnFileDownload { get; set; }

    private async Task DownloadFile(string fileUrl, string fileName)
    {
        await OnFileDownload.InvokeAsync((fileUrl, fileName));
    }

    private string GetFileIcon(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLower();
        return extension switch
        {
            ".pdf" => "picture_as_pdf",
            ".doc" or ".docx" => "description",
            ".xls" or ".xlsx" => "table_chart",
            ".ppt" or ".pptx" => "slideshow",
            ".zip" or ".rar" => "archive",
            ".txt" => "text_snippet",
            _ => "insert_drive_file"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}